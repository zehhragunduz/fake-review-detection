# -*- coding: utf-8 -*-
"""ml_model_comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/135MxkVeqe5Ux67LJQVnJsJgO5Wu1yzo1
"""

# Gerekli kütüphaneler
!pip install scikit-learn --quiet

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, f1_score

# 1. Veriyi oku (aynı dosyayla devam)
df = pd.read_csv("/content/translated_2000_reviews.csv")

# 2. Özellik ve etiket ayır
X = df["translated_text"]
y = df["label"]

# 3. Veriyi eğitim ve test olarak ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. TF-IDF vektörleme
tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,2), stop_words="english")
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

"""**LOGISTIC REGRESSION**"""

# Logistic Regression
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train_tfidf, y_train)
y_pred_lr = lr.predict(X_test_tfidf)

print("📊 Logistic Regression")
print(classification_report(y_test, y_pred_lr))

yorum = ["Kargo çok yavaş geldi, ürünü iade etmek zorunda kaldım."]
yorum_tfidf = tfidf.transform(yorum)
tahmin = lr.predict(yorum_tfidf)

print("📝 Yorum:", yorum[0])
print("📌 Tahmin Edilen Etiket:", tahmin[0])

"""**SUPPORT VECTOR MACHINE**"""

# SVM
svm = SVC(kernel='linear')
svm.fit(X_train_tfidf, y_train)
y_pred_svm = svm.predict(X_test_tfidf)

print("📊 Support Vector Machine")
print(classification_report(y_test, y_pred_svm))

# Test etmek istediğin yorum
yorum = ["Kargo çok yavaş geldi, ürünü iade etmek zorunda kaldım."]

# Yorumu TF-IDF ile dönüştür
yorum_tfidf = tfidf.transform(yorum)

# SVM ile tahmin et
tahmin = svm.predict(yorum_tfidf)

# Sonucu yazdır
print("📝 Yorum:", yorum[0])
print("📌 Tahmin Edilen Etiket (SVM):", tahmin[0])

"""**NAIVE BAYES**"""

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, f1_score, classification_report

nb = MultinomialNB()
nb.fit(X_train_tfidf, y_train)
y_pred_nb = nb.predict(X_test_tfidf)

print("📘 Naive Bayes")
print(classification_report(y_test, y_pred_nb))
print(f"Accuracy: {accuracy_score(y_test, y_pred_nb):.4f}")
print(f"F1 Score: {f1_score(y_test, y_pred_nb):.4f}")

"""**RANDOM FOREST**"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_tfidf, y_train)
y_pred_rf = rf.predict(X_test_tfidf)

print("🌲 Random Forest")
print(classification_report(y_test, y_pred_rf))
print(f"Accuracy: {accuracy_score(y_test, y_pred_rf):.4f}")
print(f"F1 Score: {f1_score(y_test, y_pred_rf):.4f}")

"""**GRADIENT BOOSTING**"""

from sklearn.ensemble import GradientBoostingClassifier

gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
gb.fit(X_train_tfidf, y_train)
y_pred_gb = gb.predict(X_test_tfidf)

print("🚀 Gradient Boosting")
print(classification_report(y_test, y_pred_gb))
print(f"Accuracy: {accuracy_score(y_test, y_pred_gb):.4f}")
print(f"F1 Score: {f1_score(y_test, y_pred_gb):.4f}")

"""**KNN**"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_tfidf, y_train)
y_pred_knn = knn.predict(X_test_tfidf)

print("👥 K-Nearest Neighbors")
print(classification_report(y_test, y_pred_knn))
print(f"Accuracy: {accuracy_score(y_test, y_pred_knn):.4f}")
print(f"F1 Score: {f1_score(y_test, y_pred_knn):.4f}")

"""**KARŞILAŞTIRMA**"""

import pandas as pd

# Her modelin sonuçlarını buraya manuel olarak giriyoruz
# Senin gerçek sonuçlarını buraya yazman gerekiyor
results = [
    {"Model": "Logistic Regression", "Accuracy": 0.8300, "F1": 0.8308},
    {"Model": "SVM", "Accuracy": 0.8425, "F1": 0.8421},
    {"Model": "Naive Bayes", "Accuracy": 0.7920, "F1": 0.7932},
    {"Model": "Random Forest", "Accuracy": 0.8355, "F1": 0.8360},
    {"Model": "Gradient Boosting", "Accuracy": 0.8470, "F1": 0.8465},
    {"Model": "KNN", "Accuracy": 0.7950, "F1": 0.7941}
]

df_results = pd.DataFrame(results).sort_values(by="F1", ascending=False).reset_index(drop=True)
df_results

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(df_results["Model"], df_results["F1"], color='skyblue')
plt.title("📈 F1 Score Karşılaştırması (Sahte Yorum Tespiti)", fontsize=14)
plt.ylabel("F1 Score")
plt.xticks(rotation=45)
plt.ylim(0.75, 0.87)
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()